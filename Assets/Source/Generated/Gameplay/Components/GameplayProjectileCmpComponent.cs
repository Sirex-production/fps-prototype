//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public Ingame.Gunplay.Projectile.ProjectileCmp projectileCmp { get { return (Ingame.Gunplay.Projectile.ProjectileCmp)GetComponent(GameplayComponentsLookup.ProjectileCmp); } }
    public bool hasProjectileCmp { get { return HasComponent(GameplayComponentsLookup.ProjectileCmp); } }

    public void AddProjectileCmp(float newCurrentSpeed) {
        var index = GameplayComponentsLookup.ProjectileCmp;
        var component = (Ingame.Gunplay.Projectile.ProjectileCmp)CreateComponent(index, typeof(Ingame.Gunplay.Projectile.ProjectileCmp));
        component.currentSpeed = newCurrentSpeed;
        AddComponent(index, component);
    }

    public void ReplaceProjectileCmp(float newCurrentSpeed) {
        var index = GameplayComponentsLookup.ProjectileCmp;
        var component = (Ingame.Gunplay.Projectile.ProjectileCmp)CreateComponent(index, typeof(Ingame.Gunplay.Projectile.ProjectileCmp));
        component.currentSpeed = newCurrentSpeed;
        ReplaceComponent(index, component);
    }

    public void RemoveProjectileCmp() {
        RemoveComponent(GameplayComponentsLookup.ProjectileCmp);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherProjectileCmp;

    public static Entitas.IMatcher<GameplayEntity> ProjectileCmp {
        get {
            if (_matcherProjectileCmp == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.ProjectileCmp);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherProjectileCmp = matcher;
            }

            return _matcherProjectileCmp;
        }
    }
}
