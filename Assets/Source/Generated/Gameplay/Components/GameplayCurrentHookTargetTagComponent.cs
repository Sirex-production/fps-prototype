//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayContext {

    public GameplayEntity currentHookTargetTagEntity { get { return GetGroup(GameplayMatcher.CurrentHookTargetTag).GetSingleEntity(); } }

    public bool hasCurrentHookTargetTag {
        get { return currentHookTargetTagEntity != null; }
        set {
            var entity = currentHookTargetTagEntity;
            if (value != (entity != null)) {
                if (value) {
                    CreateEntity().hasCurrentHookTargetTag = true;
                } else {
                    entity.Destroy();
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    static readonly Ingame.Player.Abilities.Hook.CurrentHookTargetTag currentHookTargetTagComponent = new Ingame.Player.Abilities.Hook.CurrentHookTargetTag();

    public bool hasCurrentHookTargetTag {
        get { return HasComponent(GameplayComponentsLookup.CurrentHookTargetTag); }
        set {
            if (value != hasCurrentHookTargetTag) {
                var index = GameplayComponentsLookup.CurrentHookTargetTag;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : currentHookTargetTagComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherCurrentHookTargetTag;

    public static Entitas.IMatcher<GameplayEntity> CurrentHookTargetTag {
        get {
            if (_matcherCurrentHookTargetTag == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.CurrentHookTargetTag);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherCurrentHookTargetTag = matcher;
            }

            return _matcherCurrentHookTargetTag;
        }
    }
}
