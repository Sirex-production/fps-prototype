//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayContext {

    public GameplayEntity playerCmpEntity { get { return GetGroup(GameplayMatcher.PlayerCmp).GetSingleEntity(); } }
    public Ingame.Player.Common.PlayerCmp playerCmp { get { return playerCmpEntity.playerCmp; } }
    public bool hasPlayerCmp { get { return playerCmpEntity != null; } }

    public GameplayEntity SetPlayerCmp(float newCurrentRotationX) {
        if (hasPlayerCmp) {
            throw new Entitas.EntitasException("Could not set PlayerCmp!\n" + this + " already has an entity with Ingame.Player.Common.PlayerCmp!",
                "You should check if the context already has a playerCmpEntity before setting it or use context.ReplacePlayerCmp().");
        }
        var entity = CreateEntity();
        entity.AddPlayerCmp(newCurrentRotationX);
        return entity;
    }

    public void ReplacePlayerCmp(float newCurrentRotationX) {
        var entity = playerCmpEntity;
        if (entity == null) {
            entity = SetPlayerCmp(newCurrentRotationX);
        } else {
            entity.ReplacePlayerCmp(newCurrentRotationX);
        }
    }

    public void RemovePlayerCmp() {
        playerCmpEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public Ingame.Player.Common.PlayerCmp playerCmp { get { return (Ingame.Player.Common.PlayerCmp)GetComponent(GameplayComponentsLookup.PlayerCmp); } }
    public bool hasPlayerCmp { get { return HasComponent(GameplayComponentsLookup.PlayerCmp); } }

    public void AddPlayerCmp(float newCurrentRotationX) {
        var index = GameplayComponentsLookup.PlayerCmp;
        var component = (Ingame.Player.Common.PlayerCmp)CreateComponent(index, typeof(Ingame.Player.Common.PlayerCmp));
        component.currentRotationX = newCurrentRotationX;
        AddComponent(index, component);
    }

    public void ReplacePlayerCmp(float newCurrentRotationX) {
        var index = GameplayComponentsLookup.PlayerCmp;
        var component = (Ingame.Player.Common.PlayerCmp)CreateComponent(index, typeof(Ingame.Player.Common.PlayerCmp));
        component.currentRotationX = newCurrentRotationX;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerCmp() {
        RemoveComponent(GameplayComponentsLookup.PlayerCmp);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherPlayerCmp;

    public static Entitas.IMatcher<GameplayEntity> PlayerCmp {
        get {
            if (_matcherPlayerCmp == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.PlayerCmp);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherPlayerCmp = matcher;
            }

            return _matcherPlayerCmp;
        }
    }
}
