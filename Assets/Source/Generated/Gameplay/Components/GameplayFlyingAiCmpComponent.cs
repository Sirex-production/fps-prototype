//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public Ingame.Ai.Cmp.FlyingAiCmp flyingAiCmp { get { return (Ingame.Ai.Cmp.FlyingAiCmp)GetComponent(GameplayComponentsLookup.FlyingAiCmp); } }
    public bool hasFlyingAiCmp { get { return HasComponent(GameplayComponentsLookup.FlyingAiCmp); } }

    public void AddFlyingAiCmp(UnityEngine.Vector3 newLastPosition) {
        var index = GameplayComponentsLookup.FlyingAiCmp;
        var component = (Ingame.Ai.Cmp.FlyingAiCmp)CreateComponent(index, typeof(Ingame.Ai.Cmp.FlyingAiCmp));
        component.lastPosition = newLastPosition;
        AddComponent(index, component);
    }

    public void ReplaceFlyingAiCmp(UnityEngine.Vector3 newLastPosition) {
        var index = GameplayComponentsLookup.FlyingAiCmp;
        var component = (Ingame.Ai.Cmp.FlyingAiCmp)CreateComponent(index, typeof(Ingame.Ai.Cmp.FlyingAiCmp));
        component.lastPosition = newLastPosition;
        ReplaceComponent(index, component);
    }

    public void RemoveFlyingAiCmp() {
        RemoveComponent(GameplayComponentsLookup.FlyingAiCmp);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherFlyingAiCmp;

    public static Entitas.IMatcher<GameplayEntity> FlyingAiCmp {
        get {
            if (_matcherFlyingAiCmp == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.FlyingAiCmp);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherFlyingAiCmp = matcher;
            }

            return _matcherFlyingAiCmp;
        }
    }
}
