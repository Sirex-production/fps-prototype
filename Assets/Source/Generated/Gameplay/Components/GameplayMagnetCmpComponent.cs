//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayContext {

    public GameplayEntity magnetCmpEntity { get { return GetGroup(GameplayMatcher.MagnetCmp).GetSingleEntity(); } }
    public Ingame.Player.Abilities.Magnet.MagnetCmp magnetCmp { get { return magnetCmpEntity.magnetCmp; } }
    public bool hasMagnetCmp { get { return magnetCmpEntity != null; } }

    public GameplayEntity SetMagnetCmp(float newAffectDistance, float newStrength) {
        if (hasMagnetCmp) {
            throw new Entitas.EntitasException("Could not set MagnetCmp!\n" + this + " already has an entity with Ingame.Player.Abilities.Magnet.MagnetCmp!",
                "You should check if the context already has a magnetCmpEntity before setting it or use context.ReplaceMagnetCmp().");
        }
        var entity = CreateEntity();
        entity.AddMagnetCmp(newAffectDistance, newStrength);
        return entity;
    }

    public void ReplaceMagnetCmp(float newAffectDistance, float newStrength) {
        var entity = magnetCmpEntity;
        if (entity == null) {
            entity = SetMagnetCmp(newAffectDistance, newStrength);
        } else {
            entity.ReplaceMagnetCmp(newAffectDistance, newStrength);
        }
    }

    public void RemoveMagnetCmp() {
        magnetCmpEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public Ingame.Player.Abilities.Magnet.MagnetCmp magnetCmp { get { return (Ingame.Player.Abilities.Magnet.MagnetCmp)GetComponent(GameplayComponentsLookup.MagnetCmp); } }
    public bool hasMagnetCmp { get { return HasComponent(GameplayComponentsLookup.MagnetCmp); } }

    public void AddMagnetCmp(float newAffectDistance, float newStrength) {
        var index = GameplayComponentsLookup.MagnetCmp;
        var component = (Ingame.Player.Abilities.Magnet.MagnetCmp)CreateComponent(index, typeof(Ingame.Player.Abilities.Magnet.MagnetCmp));
        component.affectDistance = newAffectDistance;
        component.strength = newStrength;
        AddComponent(index, component);
    }

    public void ReplaceMagnetCmp(float newAffectDistance, float newStrength) {
        var index = GameplayComponentsLookup.MagnetCmp;
        var component = (Ingame.Player.Abilities.Magnet.MagnetCmp)CreateComponent(index, typeof(Ingame.Player.Abilities.Magnet.MagnetCmp));
        component.affectDistance = newAffectDistance;
        component.strength = newStrength;
        ReplaceComponent(index, component);
    }

    public void RemoveMagnetCmp() {
        RemoveComponent(GameplayComponentsLookup.MagnetCmp);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherMagnetCmp;

    public static Entitas.IMatcher<GameplayEntity> MagnetCmp {
        get {
            if (_matcherMagnetCmp == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.MagnetCmp);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherMagnetCmp = matcher;
            }

            return _matcherMagnetCmp;
        }
    }
}
