//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayContext {

    public GameplayEntity axeCmpEntity { get { return GetGroup(GameplayMatcher.AxeCmp).GetSingleEntity(); } }
    public Ingame.Gunplay.Axe.AxeCmp axeCmp { get { return axeCmpEntity.axeCmp; } }
    public bool hasAxeCmp { get { return axeCmpEntity != null; } }

    public GameplayEntity SetAxeCmp(float newRange, float newDamage) {
        if (hasAxeCmp) {
            throw new Entitas.EntitasException("Could not set AxeCmp!\n" + this + " already has an entity with Ingame.Gunplay.Axe.AxeCmp!",
                "You should check if the context already has a axeCmpEntity before setting it or use context.ReplaceAxeCmp().");
        }
        var entity = CreateEntity();
        entity.AddAxeCmp(newRange, newDamage);
        return entity;
    }

    public void ReplaceAxeCmp(float newRange, float newDamage) {
        var entity = axeCmpEntity;
        if (entity == null) {
            entity = SetAxeCmp(newRange, newDamage);
        } else {
            entity.ReplaceAxeCmp(newRange, newDamage);
        }
    }

    public void RemoveAxeCmp() {
        axeCmpEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public Ingame.Gunplay.Axe.AxeCmp axeCmp { get { return (Ingame.Gunplay.Axe.AxeCmp)GetComponent(GameplayComponentsLookup.AxeCmp); } }
    public bool hasAxeCmp { get { return HasComponent(GameplayComponentsLookup.AxeCmp); } }

    public void AddAxeCmp(float newRange, float newDamage) {
        var index = GameplayComponentsLookup.AxeCmp;
        var component = (Ingame.Gunplay.Axe.AxeCmp)CreateComponent(index, typeof(Ingame.Gunplay.Axe.AxeCmp));
        component.range = newRange;
        component.damage = newDamage;
        AddComponent(index, component);
    }

    public void ReplaceAxeCmp(float newRange, float newDamage) {
        var index = GameplayComponentsLookup.AxeCmp;
        var component = (Ingame.Gunplay.Axe.AxeCmp)CreateComponent(index, typeof(Ingame.Gunplay.Axe.AxeCmp));
        component.range = newRange;
        component.damage = newDamage;
        ReplaceComponent(index, component);
    }

    public void RemoveAxeCmp() {
        RemoveComponent(GameplayComponentsLookup.AxeCmp);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherAxeCmp;

    public static Entitas.IMatcher<GameplayEntity> AxeCmp {
        get {
            if (_matcherAxeCmp == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.AxeCmp);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherAxeCmp = matcher;
            }

            return _matcherAxeCmp;
        }
    }
}
