//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayContext {

    public GameplayEntity energyGunCmpEntity { get { return GetGroup(GameplayMatcher.EnergyGunCmp).GetSingleEntity(); } }
    public Ingame.Gunplay.EnergyGun.EnergyGunCmp energyGunCmp { get { return energyGunCmpEntity.energyGunCmp; } }
    public bool hasEnergyGunCmp { get { return energyGunCmpEntity != null; } }

    public GameplayEntity SetEnergyGunCmp(float newCooldownBetweenShots, float newTimePassedSinceLastShot) {
        if (hasEnergyGunCmp) {
            throw new Entitas.EntitasException("Could not set EnergyGunCmp!\n" + this + " already has an entity with Ingame.Gunplay.EnergyGun.EnergyGunCmp!",
                "You should check if the context already has a energyGunCmpEntity before setting it or use context.ReplaceEnergyGunCmp().");
        }
        var entity = CreateEntity();
        entity.AddEnergyGunCmp(newCooldownBetweenShots, newTimePassedSinceLastShot);
        return entity;
    }

    public void ReplaceEnergyGunCmp(float newCooldownBetweenShots, float newTimePassedSinceLastShot) {
        var entity = energyGunCmpEntity;
        if (entity == null) {
            entity = SetEnergyGunCmp(newCooldownBetweenShots, newTimePassedSinceLastShot);
        } else {
            entity.ReplaceEnergyGunCmp(newCooldownBetweenShots, newTimePassedSinceLastShot);
        }
    }

    public void RemoveEnergyGunCmp() {
        energyGunCmpEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameplayEntity {

    public Ingame.Gunplay.EnergyGun.EnergyGunCmp energyGunCmp { get { return (Ingame.Gunplay.EnergyGun.EnergyGunCmp)GetComponent(GameplayComponentsLookup.EnergyGunCmp); } }
    public bool hasEnergyGunCmp { get { return HasComponent(GameplayComponentsLookup.EnergyGunCmp); } }

    public void AddEnergyGunCmp(float newCooldownBetweenShots, float newTimePassedSinceLastShot) {
        var index = GameplayComponentsLookup.EnergyGunCmp;
        var component = (Ingame.Gunplay.EnergyGun.EnergyGunCmp)CreateComponent(index, typeof(Ingame.Gunplay.EnergyGun.EnergyGunCmp));
        component.cooldownBetweenShots = newCooldownBetweenShots;
        component.timePassedSinceLastShot = newTimePassedSinceLastShot;
        AddComponent(index, component);
    }

    public void ReplaceEnergyGunCmp(float newCooldownBetweenShots, float newTimePassedSinceLastShot) {
        var index = GameplayComponentsLookup.EnergyGunCmp;
        var component = (Ingame.Gunplay.EnergyGun.EnergyGunCmp)CreateComponent(index, typeof(Ingame.Gunplay.EnergyGun.EnergyGunCmp));
        component.cooldownBetweenShots = newCooldownBetweenShots;
        component.timePassedSinceLastShot = newTimePassedSinceLastShot;
        ReplaceComponent(index, component);
    }

    public void RemoveEnergyGunCmp() {
        RemoveComponent(GameplayComponentsLookup.EnergyGunCmp);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameplayMatcher {

    static Entitas.IMatcher<GameplayEntity> _matcherEnergyGunCmp;

    public static Entitas.IMatcher<GameplayEntity> EnergyGunCmp {
        get {
            if (_matcherEnergyGunCmp == null) {
                var matcher = (Entitas.Matcher<GameplayEntity>)Entitas.Matcher<GameplayEntity>.AllOf(GameplayComponentsLookup.EnergyGunCmp);
                matcher.componentNames = GameplayComponentsLookup.componentNames;
                _matcherEnergyGunCmp = matcher;
            }

            return _matcherEnergyGunCmp;
        }
    }
}
